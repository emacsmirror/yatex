textfloatsep
\addtolength{\textfloatsep}{LENGTH}
Length between the text and, float of the top or bottom of page

floatsep
\addtolength{\floatsep}{LENGTH}
Length between two floats

oddsidemargin
\setlength{\oddsidemargin}{LENGTH}
右ページの左端から1インチ(2.54cm)の線と本文の距離

pagestyle
\pagestyle{スタイル}
出力ページのヘッダとフッタのスタイルを決める。スタイルには以下のものがある:
plain		標準スタイル. フッタにページ番号だけつける.
empty		ヘッダにもフッタにも何も出力しない.
headings	ヘッダにセクションに応じた見出しとページ番号をつけ
		フッタには何も出力しない.
myheadings	headingsのスタイルで、ヘッダの情報を \markbpth と
		\markright で指定できる.

thispagestyle
\thispagestyle{スタイル}
現在のページだけのスタイルを決定する。

pagenumbering
\pagenumbering{スタイル}
ページ番号のスタイルを決める。スタイルには以下のものがある:
arabic		アラビア数字
alph		小文字の英字
Alph		大文字の英字
roman		小文字のローマ数字
Roman		大文字のローマ数字

shortstack
\shortstack[場所]{重ねて\\表示する\\内容}
{}内の内容を\\で区切られた単位毎に積み重ねて表示する。
[場所]は、l(左寄せ)、c(センタリング)、r(右寄せ)のいずれか。

newlength
\newlength{NAME}
NAMEという長さコマンドを新たに宣言する。

addtolength
\addtolength{長さコマンド}{数値}
第1引数の長さを第2に引数の数値を足す。
代表的なスタイルパラメータについては \setlength の項を参照せよ。

setlength
\setlength{長さコマンド}{数値}
第1引数の長さを第2に引数の数値に設定する。
代表的なスタイルパラメータは以下の通り:
(スタイルパラメータの変更はプリアンブルで行うこと)
\evensidemargin	\footheight	\footskip	\headheight
\headsep	\marginparsep	\marginparwidth	\oddsidemargin
\textheight	\textwidth	\topmargin	\topskip
\parindent	\baselineskip	\baselinestretch \parskip
\columnsep	\columnseprule	\mathindent

settowidth{\NAME}{TEXT}
\hbox{TEXT}の出力結果と同じ幅に長さ\NAME をセットする。

evensidemargin
\setlength{\evensidemargin}{LENGTH}
左ページの左端から1インチ(2.54cm)の線と本文の距離

footheight
\setlength{\footheight}{LENGTH}
フッタの高さ

footskip
\setlength{\footskip}{LENGTH}
本文の箱の下端とフッタの距離

headheight
\addtolength{\headheight}{LENGTH}
ヘッダの高さ

headsep
\setlength{\headsep}{LENGTH}
ヘッダと本文の間隔

marginparsep
\addtolength{\marginparsep}{LENGTH}
傍注と本文の間隔

marginparwidth
\addtolength{\marginparwidth}{LENGTH}
傍注の幅

oddsidemargin
\addtolength{\oddsidemargin}{LENGTH}
右ページの左端から1インチ(2.54cm)の線と本文の距離

textheight
\addtolength{\textheight}{LENGTH}
本文の高さ

textwidth
\addtolength{\textwidth}{LENGTH}
本文の幅

topmargin
\addtolength{\topmargin}{LENGTH}
ページ上端から1インチの線とヘッダの距離

topskip
\addtolength{\topskip}{LENGTH}
本文の箱の上端と一行目のテキストとの間隔

parindent
\setlength{\parindent}{LENGTH}
\parindent	段落の先頭の字下げ幅.

linewidth
\addtolength{\linewidth}{LENGTH}
\linewidth	行の幅.

baselineskip
\addtolength{baselineskip}{LENGTH}
\baselineskip	行のベースライン間の最低限の高さ.

baselinestretch
\renewcommand{baselinestretch}{1.5}
\baselinestretch \baselineskip に乗ずる係数.		(default=1)
(* \setlengthなどではなく、\renewcommandで再定義する。)

parskip
\addtolength{\parskip}{LENGTH}
\parskip	段落前の垂直スペース.

columnsep
\addtolength{\columnsep}{LENGTH}
\columnsep	2段組みの時の段間の幅.

columnseprule
\addtolength{\columnseprule}{LENGTH}
二段組の時の段間の罫線の太さ.

columnwidth
\addtolength{\columnwidth}{LENGTH}
二段組の時には (\textwidth - \columnsep)/2
そうでない時は、\textwidth


columnseprule
\addtolength{columnseprule}{LENGTH}
\columnseprule	2段組みの時の段間の罫線の幅.		(default=0pt)

mathindent
\addtolength{mathindent}{LENGTH}
\mathindent	スタイルオプションで fleqn を指定した場合の、
		左マージンからの数式の字下げ幅.

LaTeX
\LaTeX
\LaTeX のロゴを表示。\LaTeX の定義は以下の通り。
\def\LaTeX{{\rm L\kern-.36em\raise.3ex\hbox{\sc a}\kern-.15em
    T\kern-.1667em\lower.7ex\hbox{E}\kern-.125emX}}

fragile
** LaTeX用語 **
引数によって展開結果が変わるようなコマンドをいう。
その逆は robust なコマンド。

robust
** LaTeX用語 **
展開結果が常に変わらないようなコマンドをいう。
フォント/サイズ指定子、長さコマンド、数式モード中に使う多くのコマンドは
robustなコマンド。
(maketitle型コマンドのうちオプション引数を全くとらないものと考えて良い)

protect
\protect「fragileなコマンド」
引数によって結果が変わるようなコマンドを「fragileなコマンド」と言う。
一方、引数がいろいろな箇所で参照されるコマンドを「動く引数を取るコマンド
と言う。これは chapter や caption など目次などから参照される引数をとるも
のや、tabular/array 環境の @ 表現が該当する。

さて、これらの「動く引数を取るコマンド」の引数に「fragileなコマンド」を
与える時に(fragileなコマンドの直前に)使うのが \protect である。以下は典
型的な利用例である。

\newcommand{\thissystem}[1]{YaTeX version #1}
\chapter{\protect \thissystem{1.50}について}

newcommand
\newcommand{\コマンド名}[引数の数]{定義}
「コマンド名」を「引数の数」個の引数を取る「定義」であるマクロとして定義
する。定義中でn番目の引数は #n として参照する。
	\newcommand{\foo}[1]{\underline{#1}}
とすると \foo{bar} は \underline{bar} と展開される。したがってフォント指
定子を含む場合newcommandの{}につられて、
	\newcommand{\foo}[1]{\bf #1}
とすると \foo{bar} がテキスト中で \bf bar と展開されてしまうので、
	\newcommand{\foo}[1]{{\bf #1}}
としなければならない。

  「コマンド名」のマクロが既に定義されている場合はエラーとなる。再定義す
る場合は、\renewcommandを使う。

renewcommand
\renewcommand{\コマンド名}[引数の数]{定義}
既に定義されているコマンドを別の内容で再定義する。
以下は \newcommand の説明。
<refer newcommand>

newenvironment
\newenvironment{環境名}[引数の数]{定義1}{定義2}
新たな環境を定義する。
\begin{環境名}の時の展開内容を「定義1」に\end{環境名}の時の展開内容を
「定義2」に記述する。
	\newcommand{\環境名}{定義1} \def{\end環境名}{定義2}
と同値。

renewenvironment
\renewenvironment{環境名}[引数の数]{定義1}{定義2}
既に定義されている「環境名」を別の内容で再定義する。
以下は、\newenvironmentの説明。

<refer newenvironment>

typeout
\typeout{メッセージ}
タイプセット中に「メッセージ」を端末に出力する。

typein
\typein{メッセージ}	\typein[\マクロ]{メッセージ}
タイプセット中に「メッセージ」をプロンプトに出し、入力した結果を実行する。
第二の書式では、「\マクロ」を入力したものに定義する。

par
\par
段落の区切りの役割をする。空行と同じ。

everypar
\everypar
RTFM

nopagebreak
\nopagebreak[i]		(i = 0,1,2,3,4)
改頁を強さiで抑制する([i]を省略すると4)。

pagebreak
\pagebreak[i]		(i = 0,1,2,3,4)
改頁を強さiで促す([i]を省略すると4)。

linebreak
\linebreak[i]		(i = 0,1,2,3,4)
改行を強さiで促す([i]を省略すると4)。

nolinebreak
\nolinebreak[i]		(i = 0,1,2,3,4)
改行を強さiで抑制する([i]を省略すると4)。

samepage
\samepage
改頁を禁止する。
RTFM

obeycr
\obeycr
<CR> を \\. に定義する。→\restorecr

restorecr
\restorecr
\obeycrで変更した<CR>の定義を元に戻す。

\
\\		\\[長さ]
(任意の場所で)改行する。段落中では、\newline と同じ。
オプション引数の[長さ]を指定すると、次の行との間隔を
\vspace{LENGTH}によって確保する。

addvspace
\addvspace{スキップ}
縦方向の間隔に「スキップ」の値を足す。ただし
\addvspace{S1} \addvspace{S2} と複数の値を同時に指定しても
\addvspace{S1,S2のうち大きいほう} と同値になる。

vspace
\vspace{間隔}		\vspace*{間隔}
垂直方向に「間隔」ぶんのスペースを足す。
\vspace* はどんな場所でもスペースを足すが、\vspace はページの先頭や
末尾でははたらかない。

vspace*
\vspace{間隔}		\vspace*{間隔}
垂直方向に「間隔」ぶんのスペースを足す。
\vspace* はどんな場所でもスペースを足すが、\vspace はページの先頭や
末尾でははたらかない。

hspace
\hspace{間隔}		\hspace*{間隔}
水平方向に「間隔」ぶんのスペースを足す。
\hspace* はどんな場所でもスペースを足すが、\hspace は行の先頭や末尾では
はたらかない。

hspace*
\hspace{間隔}		\hspace*{間隔}
水平方向に「間隔」ぶんのスペースを足す。
\hspace* はどんな場所でもスペースを足すが、\hspace は行の先頭や末尾では
はたらかない。

smallskip
\smallskip
垂直方向に小さな間隔を空ける。
\def\smallskip{\vspace\smallskipamount}

medskip
\medskip
垂直方向に中くらいの間隔を空ける。
\def\medskip{\vspace\medskipamount}

bigskip
\bigskip
垂直方向に大きな間隔を空ける。
\def\bigskip{\vspace\bigskipamount}

,
\,
狭いスペースを空ける。段落モード、LRモード、数式モードいずれでも利用可。
クォートの中にクォートを書くときなどに用いる。
例: ``\,`Foo', he said.''
数式モードで使えるスペースには以下のものがある:
	\:	少し広い
	\!	負で狭い
	\;	広い

:
$\:$
少し広いスペース。数式モードのみ。

!
$\!$
狭い負のスペース。数式モードのみ。

;
$\;$
広いスペース。数式モードのみ。

@whilenum
\@whilenum TEST \do {BODY}  
この辺あとで

nofiles
\nofiles
プリアンブルで宣言すると、.aux, .idx, .lof, .lot, .toc ファイルの作成が
抑制される。

includeonly
\includeonly{sub1}	\includeonly{sub1,sub3}
\include{}で読み込むファイルのうち、実際に読み込み処理するものを指定する。
(.texは省略可)
\includeonlyの引数リストにないファイルはまったく処理されない、または前回
以前に処理されている場合そこから全く変更がないものとして扱われる。

include
\include{FILE}
\clearpage \input{FILE} \clearpage
と同じはたらきをする。

input
\input{FILE}
FILE.tex がそこにあるかのように処理を続ける。

setcounter
\setcounter{FOO}{VAL}
カウンタFOOの値をVALに設定する。

addtocounter
\addtocounter{FOO}{VAL}
カウンタFOOの値にVALを加える。

newcounter
\newcounter{COUNTER}[OLDCTR]
新しいカウンタCOUNTERを設定する。
オプション引数[OLDCTR]を指定すると、既存のカウンタOLDCTRの値が
\stepcounter もしくは \addtocounter で変更されるたびにCOUNTERの値もリセッ
トされる。

value
\value{COUNTER}
COUNTERの値を返す。\protect を前置してはならない。

stepcounter
\stepcounter{FOO}
カウンタFOOの値をインクリメントする。FOOに従うカウンタがあればそれらをリ
セットする。

refstepcounter
\refstepcounter{FOO}
カウンタFOOの値をインクリメントする。FOOに従うカウンタがあればそれらをリ
セットする。\stepcounterとの違いは、\refstepcounter{FOO} の直後に 
\label{hoge} があった場合に、\ref{hoge} の値が \value{FOO} を持つように
「\ref値」を設定することである。

arabic
\arabic{COUNTER}
アラビア数字でCOUNTERの値を出力。

roman
\roman{COUNTER}
小文字のローマ数字でCOUNTERの値を出力。

Roman
\Roman{COUNTER}
大文字のローマ数字でCOUNTERの値を出力。

alph
\alph{COUNTER}
小文字の英字でCOUNTERの値を出力。

Alph
\Alph{COUNTER}
大文字の英字でCOUNTERの値を出力。

fnsymbol
\fnsymbol{COUNTER}
脚注シンボル(1 = *, 2 = \dagger, ...) でCOUNTERの値を出力。数式モードのみ。

label
\label{LABEL}
ラベルLABELの値をその時の「\ref値」に設定する。
この値は、\ref{LABEL}によって参照される。また\pageref{LABEL}により
\label{LABEL}の存在するページ番号が参照される。
「\ref値」とは \section などのセクションコマンド、enumerate環境での
\item コマンド、theorem環境などによって設定される値である。例えば、
enumerate環境中の \item の直後ではそのitemの番号が「\ref値」となり、
そこにある \label{LABEL} はitemの番号をLABELにセットする。

ref
\ref{LABEL}
\label{LABEL}で設定したLABELの値を参照する。
本文中で設定されたラベルにたいしてはページ番号が、
図表中で設定されたラベルは図表番号が、
enumerateされたitemで設定されたラベルにたいしては、item番号が返される。

pageref
pageref{LABEL}
\label{LABEL}の存在するページ番号を参照する。

(
\( 数式 \)
文中数式を組む。
\begin{math} 数式 \end{math}
と同値。\( および \)は fragile.

)
\( x^2 = 4 \)
文中数式を組む。
\begin{math} 数式 \end{math}
と同値。\( および \)は fragile.

[
ディスプレイ数式を組む。
\[ 数式 \]
\begin{displaymath} 数式 \end{displaymath}
と同値。\[ および \]は fragile.

)
\[ 数式 \]
ディスプレイ数式を組む。
\begin{displaymath} 数式 \end{displaymath}
と同値。\[ および \]は fragile.

equation
\begin{equation} 数式 \end{equation}
番号つきの数式をdisplaymath環境で組む。

eqnarray
\begin{eqnarray} 方程式の並び \end{eqnarray}
方程式の並びを3つの桁に整理して出力する。3つの桁は&記号によって、
「左辺 & 等不等号 & 右辺」のように区切られる。例えば以下のようにする。
\begin{eqnarray}
 3x + 2y & = & 4 \\
  x - 4y & = & -5
\end{eqnarray}
eqnarray* 環境は数式番号を出力しないほかはeqnarray環境と同じである。

eqnarray*
\begin{eqnarray*} 方程式の並び \end{eqnarray*}
数式番号を出力しないほかはeqnarray環境と同じである。

frac
\frac{分子}{分母}
 分子
------   のような分数形式を組む。{分子 \over 分母} と同じ。
 分母

sqrt
\sqrt[N]{式}
「式」のN乗根をあらわす数式。[N]を省略すると平方根。

lefteqn
\lefteqn{式}
ディスプレイ数式モードにおいて、「式」が幅ゼロであるとみなして、左寄せす
る。たとえばeqnarray環境において、左辺が長くなってしまう場合に、行を
折り畳むために利用する。
\begin{eqnarray}
 \lefteqn{a_1 + a_2 + \cdots + a_n =} \\
 	&	&	a_1 + b_1 + \cdots + z_1 + \\
 	&	&	b_2 + c+2 + \cdost + z_2
\end{eqnarray}

center
\begin{center} 内容 \end{center}
「内容」を中央寄せする。各行は\\によって改行位置を指定する。
→ \centering

flushright
\begin{flushright} 内容 \end{flushright}
「内容」を右寄せする。各行は\\によって改行位置を指定する。
→ \raggedright

flushleft
\begin{flushleft} 内容 \end{flushleft}
「内容」を左寄せする。各行を\\によって改行位置を指定するとその位置で改行
するが、指定しないと適当な行長のところで改行してくれる。
→ \raggedleft

centering
\centering 
段落をセンタリングして組版する。
たとえば table環境、figura環境の先頭で宣言すると環境の終りまでをセンタリ
ングして組む。

raggedright
\raggedright
段落を右寄せして組版する。

raggedleft
\raggedleft
段落を左寄せして組版する。

raggedbottom
\raggedbottom
組版する時に各ページの高さに多少のずれがあっても許容する。
プリアンブルで指定する。
→\flushbottom

flushbottom
\flushbottom
組版する時に各ページの高さを正確にそろえる。
プリアンブルで指定する。
→\raggedbottom

sloppy
\sloppy
\sloppy を指定すると、各行を必ず右マージンで折り返す代わりに、
単語間の空白を大目に見る。
→\fussy

fussy
\fussy
通常の組版規則に戻る。
→\sloppy

sloppypar
\begin{sloppypar} 段落 \end{sloppypar}
段落を \sloppy で組む。
→\sloppy

verbatim
\begin{verbatim} ... \end{verbatim}
The verbatim environment uses the fixed-width \tt font, turns blanks into 
spaces, starts a new line for each carrige return (or sequence of 
consecutive carriage returns), and interprets EVERY character literally.
I.e., all special characters \, {, $, etc. are \catcode'd to 'other'.

verbatim*
\begin{verbatim*} ... \end{verbatim*}
<refer verbatim>

The verbatim* environment is the same, except that spaces
print as the TeXbook's space character instead of as blank spaces.

list
\begin{list}{デフォルトラベル}{整形パラメータ} ... \end{list}
リスト環境に入る。リスト環境では \item で指定された各項目を一定の字下げ
で列挙する。第1引数には \item のオプション引数のラベルが省略された時のデ
フォルトラベルを指定し、第2引数には各itemを置く時に処理されるパラメータ
を指定する。
例:
\begin{list}%
 {$\diamond$}
 {\addtolength{\leftmargin}{4em}}
 \item 第1引数には\verb|\item| にオプション引数をつけなかった時にふる、
       デフォルトのラベルを与える。
 \item 第2引数には各itemを置く時に処理されるパラメータを与える。
 \item[*] のようにオプション引数をつけるとそれがラベルとなる。
\end{list}

  list環境の体裁を制御する変数には以下のものがある(括弧内は既定値)。
水平方向:
<refer list環境の体裁を制御する変数>

list環境の体裁を制御する変数
\labelwidth	itemのラベルの幅
\labelsep	ラベルの右端と最初のアイテムのテキストとの間隔
\leftmargin	list環境内での左マージン
\rightmargin	同右マージン (0pt)
\itemindent	itemの直前に加えられるインデント幅 (0pt)
\linewidth	一行の幅
\listparindent	各パラグラフの先頭のインデント(ただし\itemの付いている先
		頭のパラグラフを除く)(0pt)

垂直方向:
\topsep		list環境に入る前のパラグラフと最初のitemとの間隔
\partopsep	list環境で新しいパラグラフをはじめる時に\topsepに加えら
		れる付加的な間隔
\itemsep	連続するitemどうしの間隔
\parsep		一つのitem内でのパラグラフどうしの間隔


itemize
\begin{itemize} \item アイテム1 ... \item アイテムn \end{itemize}
項目を列挙するための環境。
最大4つまでネストできる。
各レベルのitemの頭につく記号は、\labelitemi, \labelitemii,
\labelitemiii, \labelitemiv で制御される。

itemize環境の体裁を制御する変数には以下のものがある。
<refer list環境の体裁を制御する変数>


enumerate
\begin{enumerate} \item アイテム1 ... \item アイテムn \end{enumerate}
項目を番号つきで列挙するための環境。
最大4つまでネストできる。
各レベルのitemの頭につく番号は、enumi, enumii, enumiii, enumiv
が保持していて、各itemのラベルは、\labelenumi, ..., \labelenumiv
で生成される。また、\p@enumN\theenumN は \ref値を設定する。
(Nはレベルの深さ。\ref値については\refの説明を参照せよ)
たとえば
\def\theenumii{\alph{enumii}}
\def\p@enumii{\theenumi\theenumii}
\def\labelenumii{(\theenumii)}
とすると \ref値が 3a などのように設定される。

enumerate環境の体裁を制御する変数には以下のものがある。
<refer list環境の体裁を制御する変数>

item
\item			\item[LABEL]
itemize, enumerate, description 環境などで項目を開始する。
[LABEL]を指定するとラベルとしてLABELを出力する。

description
\begin{description} \item[見出し単語] 説明 ... \end{description}
[見出し単語]を見出しとする

subitem
\subitem 項目
サブアイテムを定義。

subsubitem
\subsubitem 項目
サブサブアイテムを定義。

makebox
\makebox[WID][POS]{オブジェクト}	\makebox(X,Y)[POS]{オブジェクト}
第1の書式では、オブジェクトをWIDで指定した幅として、\hbox 内の
POSで指定した場所に配置する。POSにlを指定すると左寄せ、rを指定すると右寄せ、
何も指定しないとセンタリングされる。
第2の書式では、picuture環境で大きさ(X,Y)の(\unitlengthを基準とする)
\hbox にオブジェクトを配置する。配置位置POSは第1の書式と同様。

mbox
\mbox{オブジェクト}
\makebox{オブジェクト}と同じ。

newsavebox
\newsavebox{\CMD}
新規のボックス保存用コマンドを定義する。\CMDは \savebox コマンドで
ボックスを保存するために使う。\newsaveboxで宣言したコマンド名は
常にグローバルとなる。

savebox
\savebox{\CMD}{テキスト}
ボックスを組む内容である「テキスト」の結果を\CMDに保存する。
「テキスト」は \makebox への引数と全く同じであるが、「テキスト」を
処理した結果はその場に表示はしない。\usebox{\CMD}により処理したボックス
が置かれる。

sbox
\sbox{\CMD}{テキスト}
\saveboxと同じ。sboxはrobust, saveboxはfragile

framebox
\framebox{オブジェクト}
「オブジェクト」に枠をつけて\makeboxと同様の処理をする。
枠の線の太さは \framerule、オブジェクトとの間隔は \framesep で決まる。た
だしpicture環境で \framebox(X,Y){オブジェクト}とした場合は、picture環境
用の線の太さに従い、外枠とオブジェクトとの間隔は空けられない。

fbox
\fbox{オブジェクト}
\framebox{オブジェクト}と同じ。
\fboxはrobust, \frameboxはfragile

parbox
\parbox[POS]{WIDTH}{TEXT}
TEXTをWIDThの幅で組んでボックスを作成する。ボックスの位置はPOSによって
c : センタリング(デフォルト)
b : ボックスの一番下の線が現テキストのラインに合う
t : ボックスの一番上の線が現テキストのラインに合う
のように決められる。\parboxではパラメータが以下のようにリセットされる。

\parskip          = 0pt
\linewidth        = \hsize
\@totalleftmargin = 0pt
\leftskip         = 0pt
\rightskip        = 0pt
\@rightskip       = 0pt
\parfillskip      = 0pt plus 1fil
\lineskip         = \normallineskip
\baselineskip     = \normalbaselineskip

minipage
\begin{minipage}[pos]{WIDTH}  TEXT   \end{minipage}
\parbox とほぼ同様WIDTHの幅のTEXTをボックスとして組む。ボックスの位置は
POSによって
c : センタリング(デフォルト)
b : ボックスの一番下の線が現テキストのラインに合う
t : ボックスの一番上の線が現テキストのラインに合う
のように決められる。
parboxと違い、TEXTは通常のパラグラフとして組まれる。

rule
\rule[RAISED]{WIDTH}{HEIGHT}
幅 WIDTH x 高さ HEIGHT の罫線を作る。RAISEDが指定された場合、その分だけ
上に上げられる。

underline
\underline{TEXT}
TEXTに下線をつけて表示。

raisebox
\raisebox{DISTANCE}[HEIGHT][DEPTH]{BOX}
BOXをDISTANCEだけ上げて組む。
HEIGHT, DEPTH を指定すると、TeXから見たBOXの「高さ」と「深さ」
(註:これらの用語についてはTeXBookなどを参照のこと)
を HEIGHT, DEPTH に指定する。

tabbing
\begin{tabbing} \= text1.1 \= text1.2 \\ \> text2.1 \> text2.2 \end{tabbing}
桁揃えを行う環境を作る(入れ子不可)。例えば、
\begin{tabbing}
 \= 項目1 \hspace*{2em} \= 項目2 \hspace*{3em}	\= 項目3 \\
 \> いろは		\> にほへ		\> とちり \+ \\
 			\> ぬるを		\> わかよ \\
			\> たれそ \- \\
 \> つねな		\> らむう		\> ゐのお
\end{tabbing}
上のtabbing環境は以下のように3つのタブ位置で組まれる。
  (1番目)   (2番目)     (3番目)
   いろは    にほへ      とちり
             ぬるを      をかよ
             たれそ
   つねな    らむう      ゐのお
        \2em/      \3em/
tabbing環境におけるタブ位置操作コマンドは以下の通り(nは1から):
\=	n番目のタブ位置を現在位置に設定しタブカウンタ(n)を1進める
\\	改行してタブカウンタをリセットする(n=1)
\>	位置をn番目のタブ位置に設定し、カウンタを1進める
\+	次の行のタブカウンタの初期値に1加える \+ \\ とすると次の行の最初
	の \> は2番目のタブ位置を示す. \+ を複数書くとその数だけタブカウ
	ンタの初期値が増える
\-	\+とは逆に、次の行のタブカウンタの初期値から1引く
\<	一つ前のタブカウンタに戻ってそのタブ位置をセット. 行頭のみ
\'	\'以降を通常のタブ位置より \tabbingsep 分だけ右寄せして出力
\`	\`以降のテキストをすべて右寄せして出力
\pushtabs それまで用いていたタブストップ位置を全てpush
\poptabs  それまで用いていたタブストップ位置を全てpop. \pushtabs と 
	\poptabs は必ず対になっていなければならない. 入れ子可
\aX	Xは = か ' か `   tabbing環境でない通常のアクセントは
	\a= \a' \a` で表わす
\kill	現在行のテキストは出力せずタブ設定だけ解釈する

array
\begin{array}{PREAMBLE} C1 & C2 & .. & Cn \\ D1 ... \end{array}
Make a mathematical array.  Useful to make matrix.
See the help of `tabular' for detailed description.

tabular
\begin{tabular}[OPT]{PREAMBLE} C1 & C2 & .. & Cn \\ D1 ... \end{tabular}
Make tabular.
[[OPT]]
[t]		Align the top of tabular to the line.
[b]		Align the bottom of tabular to the line.
[[PREAMBLE]]
  l,r,c  : indicate where entry is to be placed.
  |      : for vertical rule
  @{EXP} : inserts the text EXP in every column.  \arraycolsep or \tabcolsep
           spacing is suppressed.
  *{N}{PRE} : equivalent to writing N copies of PRE in the preamble.  PRE
              may contain *{N'}{EXP'} expressions.
  p{LEN} : makes entry in parbox of width LEN.

[[Usable commands in array, tabular environment]]
\multicolumn
<refer multicolumn>
\vline
<refer vline>
\hline
<refer hline>
\cline{i-j}
<refer cline>
\extracolsep{W}
<refer extracolsep>


See below as sample.

\LaTeX Expression				Printed image
\begin{array}{ccr}
 x+y+z	& a_1	&  1 \\				x+y+z  a1    1
 x+z	& a_2	&  21 \\			 x+z   a2   21
 y	& a_3	&  321				  y    a3  321
\end{array}

\[ \left(
 \begin{array}{cccc}
  a_{11}  & a_{12}  & \dots & a_{1n} \\		/ a11 a12 ... a1n \
  a_{21}  & a_{22}  & \dots & a_{2n} \\		| a21 a22 ... a2n |
  \vdots  & \vdots  & \ddots& \vdots \\		|  :   :  \.   :  |
  a_{n1}  & a_{n2}  & \dots & a_{nn}		\ an1 an2 ..: ann /
 \end{array} 
\right)\]

\right(, \left) or \right{, left} or \right[, \left] or \right|, \left|
can enclose whole of array environment by parentheses, braces, brackets,
norm respectively.  The number of `\right's and `\left's should be the
same, but the type of parentheses don't have to match like
\right( \left].  `\right.' produces the invisible parenthesis.

\[ Ans. \cdots \left\{					 /
	  \begin{array}{ccc}				 |  x = 5
	   x & = & 5 \\				Ans. ...<
   	   y & = & 3					 |  y = 3
	  \end{array} \right. \]			 \

Here are the style parameters for the tabular environment.
\arraycolsep    : half the width separating columns in an array environment
\tabcolsep      : half the width separating columns in a tabular environment
\arrayrulewidth : width of rules
\doublerulesep  : space between adjacent rules in array or tabular
\arraystretch   : line spacing in array and tabular environments is done by
                  placing a strut in every row of height and depth 
                  \arraystretch times the height and depth of the strut
                  produced by an ordinary \strut commmand.

Tabular environment cannot spread across pages.  `supertabular.sty'
allow this.

tabular*
\begin{tabular*}{幅}{プリアンブル} ... \end{tabular*}
Make tabular environment with specifying its width.
To fill this width, use \extracolsep{} of preamble as below:
\begin{tabular*}{10em}[b]{|c@{\extracolsep{\fill}}|c|c|}
 \hline
 a & b & c \\ \hline
 1 & 2 & 3
\end{tabular*}
See also tabular.

multicolumn
\multicolumn{N}{FORMAT}{ITEM}
In tabular environment,
replaces the next N column items by
ITEM, formatted according to FORMAT.  FORMAT should contain at most
one l,r or c.  If it contains none, then ITEM is ignored.

vline
\vline
In tabular environment,
draws a vertical line the height of the current row.  May
appear in an array element entry.


hline
\hline
In tabular environment draws a horizontal line between rows.  Must
appear either before the first entry (to appear above the first row) or
right after a \\ command.  If followed by another \hline, then adds a
\vskip of \doublerulesep.

cline
\cline{i-j}
In tabular environment,
draws horizontal lines between rows covering columns
i through j, inclusive.  Multiple commands may follow
one another to provide lines covering several disjoint
columns

extracolsep
\extracolsep{W}
for use inside an @ in the preamble.  Causes a WIDTH
space to be added between columns for the rest of the 
columns.  This is in addition to the ordinary intercolumn 
space.

picture
\begin{picture}(WIDTH,HEIGHT)(X,Y) ..contents.. \end{picture}
The picture  environment  allows you to create  just about any kind of
picture you want containing text, lines, arrows and circles.  You tell
LaTeX  where  to  put  things  in  the  picture  by  specifying  their
coordinates.   A coordinate  is a number that may have a decimal point
and a minus  sign  - a number  like  5, 2.3 or -3.1416.   A coordinate
specifies a length in multiples of the unit length \unitlength,  so if
\unitlength  has been set to 1cm, then the coordinate 2.54 specifies a
length of 2.54 centimeters.   You can change  the value of \unitlength
anywhere  you want, using the \setlength  command,  but strange things
will happen if you try changing it inside the picture environment.

A position is a pair of coordinates,  such as (2.4,-5), specifying the
point  with x-coordinate  2.4 and y-coordinate  -5.   Coordinates  are
specified  in the  usual  way  with  respect  to an origin,  which  is
normally  at the lower-left  corner of the picture.   Note that when a
position  appears as an argument,  it is not enclosed  in braces;  the
parentheses serve to delimit the argument.

The  picture  environment  has  one  mandatory  argument,  which  is a
position.   It specifies  the size  of the picture.   The  environment
produces  a rectangular  box with width and height determined  by this
argument's x- and y-coordinates.

The  picture  environment  also  has  an optional  position  argument,
following  the size argument,  that  can change  the origin.   (Unlike
ordinary optional arguments,  this argument is not contained in square
brackets.) The optional argument gives the coordinates of the point at
the lower-left corner of the picture (thereby determining the origin). 
For example, if \unitlength has been set to 1mm, the command

\begin{picture}(100,200)(10,20)

produces   a  picture   of  width  100  millimeters   and  height  200
millimeters,  whose lower-left  corner is the point (10,20)  and whose
upper-right  corner is therefore the point (110,220).   When you first
draw a picture,  you will  omit  the optional  argument,  leaving  the
origin  at the lower-left  corner.   If you then want  to modify  your
picture by shifting everything, you just add the appropriate  optional
argument.

The environment's  mandatory  argument determines  the nominal size of
the picture.   This need  bear  no relation  to how large  the picture
really  is; LaTeX will happily  allow  you to put things  outside  the
picture, or even off the page.  The picture's  nominal size is used by
TeX in determining how much room to leave for it.

Everything that appears in a picture is drawn by the \put command. The
command

\put (11.3,-.3){...}

puts the object specified  by "..." in the picture, with its reference
point at coordinates  (11.3,-.3).   The reference  points  for various
objects will be described below.

The \put command creates an LR box.  You can put anything  in the text
argument  of the \put command  that you'd put into the argument  of an
\mbox and related  commands.   When you do this,  the reference  point
will be the lower left corner of the box.

Picture environment is obsolete I thinks, so show only commands.

[[COMMANDS]]
\put(X,Y){OBJECT}
\multiput(X,Y)(dX,dY){REPEAT}{OBJECT}
[[OBJECTS]]
\makebox(X,Y)[POS]{TEXT}
\framebox(X,Y)[POS]{TEXT}
\dashbox(X,Y)[POS]{TEXT}
(POS = l, r, b, t)
\line(dX,dY){HorizontalLength}
\vector(dX,dY){HorizontalLength}		(arrow)
(dX,dY = +-1, +-2, ..., +-6)
\shortstack[POS]{FIRST\\SECOND\\THIRD...}
\circle{DIAMETER}
\circle*{DIAMETER}				(Filled circle)
(Maximum diameters are 40pt, 15pt)
\oval(Dia-X,DiaY)[POS]				(Oval POS = l, r, t, b)
\frame{OBJECT}
\thinlines, \thicklines				(choose line thickness)
\linethickness{THICKNESS}

newtheorem
\newtheorem{NAME}{TEXT}[COUNTER]	\newtheorem{NAME}[OLDNAME]{TEXT} 
This defines the environment NAME to be just as one would expect a 
theorem environment to be, except that it prints ``TEXT'' instead of 
``Theorem''.  

If OLDNAME is given, then environments NAME and OLDNAME use the same 
counter, so using a NAME environment advances the number of the next 
NAME environment, and vice-versa.

If COUNTER is given, then environment NAME is numbered within COUNTER.
E.g., if COUNTER = subsection, then the first NAME in subsection 7.2
is numbered TEXT 7.2.1.

The way NAME environments are numbered can be changed by redefining
\theNAME.

title
\title{TITLE}
Define the title of the document.

author
\author{AUTHOR}
Declare the author of the document.

date
\date{DATE}
Define the date of document which is used by \maketitle.
Omitting DATE produces current date.

thanks
\thanks{FOOTNOTE}
Output a footnote in title page.

maketitle
\maketitle
Output a title.  Should be written in document environment.
Here are the constituents of title page.
\title{TITLE}
\author{AUTHOR}
\date{DATE}		(If DATE omitted, output the date of typesetting)
\thanks{NOTE}		(Output a thanks message or the post of the author)

part
\part{TITLE}
Start a new part whose title is TITLE.
<refer chapter>

chapter
\chapter{TITLE}
Start a chapter whose title is TITLE.
Sectioning commands:
\part			Part ?
\chapter		Chapter ?	(not available in `article.sty')
\section		?
\subsection		?.?
\subsubsection		?.?.?
\paragraph		***
\subparagraph		===

section
\section{TITLE}
Start a section whose title is TITLE.
<refer chapter>

subsection
\subsection{TITLE}
Start a subsection whose title is TITLE.
<refer chapter>

subsubsection
\subsubsection{TITLE}
Start a paragraph whose title is TITLE.
<refer chapter>

paragraph
\paragraph{TITLE}
Start a paragraph whose title is TITLE.
<refer chapter

subparagraph
\subparagraph{TITLE}
Start a subparagraph whose title is TITLE.
<refer chapter>

appendix
\appendix
Declare the beginning of appendix.
Change the numbering fashion to appendix oriented.

contentsline
\contentsline{TYPE}{ENTRY}{PAGE}
\contentsline{subsection}{\makebox{30pt}[r]{1.4.3} Gnats and Gnus}{22}
Macro to produce a TYPE entry in a table of contents, etc.
It will appear in the .TOC or other file.  For example,
The entry for subsection 1.4.3 in the table of contents might
be produced by:
\contentsline{subsection}{\makebox{30pt}[r]{1.4.3} Gnats and Gnus}{22}
The \protect command causes command sequences to be written
without expanding them.

addcontentsline
\addcontentsline{TABLE}{TYPE}{ENTRY}
User command for adding his own entry to a table of contents, etc.
It adds the entry
   \contentsline{TYPE}{ENTRY}{page}
to the .TABLE file.

addtocontents
\addtocontents{TABLE}{TEXT}
Adds TEXT to the .TABLE file, with no page number.

index
\index{INDEX}
Create an entry of index.


glossary
\glossary{STRING}
Create an entry of glossary.

makeindex
\makeindex
Writes \indexentry to .idx file.
Should be in preamble.

makeglossary
\makeglossary
Writes \glossaryentry to .glo file.
Should be in preamble.

bibliography
\bibliography{FILE1,FILE2, ... ,FILEn}
Specifies the bibdata files.

bibliographystyle
\bibliographystyle{STYLE}
Style of numbering of bibliographies.
plain	nomal
unsrt	without sortingg
alpha	gives tag like "Foo94"
abbrv	omit the first name of author, publishing month, book title

thebibliography
\begin{thebibliography} \bibitem{ITEM},... \end{thebibliography}
The thebibliography environment is a list environment.  To save the
use of an extra counter, it should use  enumiv  as the item counter.
Instead of using \item, items in the bibliography are produced by the 
\bibitem command.
---
<refer bibitem>

bibitem
\bibitem{NAME}			\bibitem[LABEL]{NAME}
Produces a numbered (as [1], [2],...) entry cited as NAME.
Second form produces an entry labeled by LABEL and cited as NAME.

thefootnote
In usual LaTeX style, produces the footnote number.
If footnotes are to be numbered within pages, then the 
document style file must include an \@addtoreset command 
to cause the footnote counter to be reset when the page 
counter is stepped.  This is not a good idea, though,
because the counter will not always be reset in time
to ensure that the first footnote on a page is footnote
number one.  

footnote
\footnote{NOTE}   or   \footnote[NUM]{NOTE}
User command to insert a footnote.
In second form, insert a footnote numbered
NUM, where NUM is a number -- 1, 2,
etc.  For example, if footnotes are numbered
*, **, etc. within pages, then \footnote[2]{...}
produces footnote '**'.  This command does not
step the footnote counter.
(fragile)

footnotemark
\footnotemark[NUM]
Command to produce just the footnote mark in
the text, but no footnote.  With no argument,
it steps the footnote counter before generating
the mark.

footnotetext
\footnotetext[NUM]{TEXT}
Command to produce the footnote but no  mark.
\footnote is equivalent to \footnotemark \footnotetext .

footnotesize
{\footnotesize ...}
Size-changing command for footnotes.

footnotesep
\footnotesep
The height of a strut placed at the beginning of every footnote.

footnoterule
\footnoterule
Macro to draw the rule separating footnotes from text.
It is executed right after a \vspace of \skip\footins.
It should take zero vertical space--i.e., it should to
a negative skip to compensate for any positive space
it occupies.  (See PLAIN.TEX.)

documentstyle
\documentstyle[OPTION1,OPTION2, ... ,OPTIONn]{STYLE}
The user starts his file with the command as above
which saves the OPTION's and \input's the file STYLE.STY.

verb
\verb#CONTENTS#
The command \verb produces in-line verbatim text, where the argument
is delimited by any pair of characters.  E.g., \verb #...# takes
'...' as its argument, and sets it verbatim in \tt font.

The *-variants of these commands is the same, except that spaces
print as the TeXbook's space character instead of as blank spaces.

styleparameter
まだ訳していないスタイルパラメータ。

topfigrule
\topfigrule
Command to place rule (or whatever) between floats
at top of page and text.  Executed in inner vertical
mode right before the \textfloatsep skip separating
the floats from the text.  Must occupy zero vertical
space.  (See \footnoterule.)

botfigrule
\setlength{\botfigrule}{LENGTH}
Same as \topfigrule, but put after the \textfloatsep
skip separating text from the floats at bottom of page.

intextsep
\setlength{\intextsep}{LENGTH}
Space left on top and bottom of an in-text float.

newpage
\newpage
Advance to a new page.
\clearpage 		Output the unfinished table of images, if any,
			and clear page.
\cleardoublepage 	Same as \clearpage except that when spread style
			(such as book), start a new page with odd page.
\newpage		Finish current column when twocolumn.

clearpage
\clearpage 
<refer newpage>

cleardoublepage
\cleardoublepage 
<refer newpage>

length

Here are the available units of length in TeX.
cm		centi meter
em		width of `M'
ex		height of `x'
in		inch (=2.54cm)
mm		mi.li meter
pc		pica(=12pt)
pt		point (72.27pt=1 inch)
\fill		Freely extendable length whose normal length is 0
\stretch{X}	X-times as long as \fill

stretch
\stretch{X}
<refer length>

twocolumn
\twocolumn[STRING]
Clear page and start two-column typesetting.
Optional argument [STRING] specifies the page-acrossing title.
->onecolumn

onecolumn
\onecolumn
Clear page and start one-column typesetting.
->twocolumn

topnewpage
\topnewpage{BOX}
Begin a new page and create the parbox-ed BOX whose width is \textwidth.
This is useful to make a page-acrossing title in a twocolumn page.

YaTeX
(setq auto-mode-alist (cons '("\\.tex$" . yatex-mode) auto-mode-alist))
おそらくあなたが今使っているこのモード。
LaTeXを効率的に使うための多くの機能を盛り込んでいます。

【発音について】
yatex.elなどプログラムを指す時は「やてっく」、システムを指す時は「やちょ
う」と読みます。

【謝辞】
以下の方々の御協力を頂きました。ここに感謝申し上げます。

(順不同)
峯恒憲さん(九州大)
	Bibtex起動、typeset process の kill、エラー箇所の正しい判定
	の要望その他を頂きました。

森中秀明さん(アンリツ)
	タイプセットバッファでの実行継続、lpq, bibtex起動、領域指定タイ
	プセット後のプレビュー対象ファイルのデフォルト値の変更、
	describe-mode、\verb の補完の要望、verbatim環境や\verbの中にある
	\begin{}, \end{} を数えないようにする要望、などを頂きました。

石坂裕毅さん(富士通)
	YaTeX-get-error-file のバグレポートなどを頂きました。

Bayardさん(asciinet)
	min-outとの連係の不具合の報告を頂きました。

Ｋけんさん(asciinet)
	ms-dos固有の設定に関するバグレポートを頂きました。

sa2cさん(asciinet)
	Mule用のパッチを頂きました。

桂川直己さん(筑波大)
	数え切れないバグレポートと要望を頂きました。またVzへの移植版であ
	る laitex(雷鳥) を作成されました。

三平善郎さん(慶応大)
	開き括弧の入力時の処理のモード分けのアイデアを頂きました。

萩庭崇さん(慶応大)
	begin型補完の内側に文字があった場合それらをインデントしてほしい
	という要望を頂きました。

田中健次郎さん(慶応大)
	タイプセット時に未セーブ状態の関連ファイルをセーブして欲しいとい
	う要望を頂きました。

bauerさん(asciinet)
	アクセント補完の要望とアクセント記号の規則の情報等を頂きました。

佐々木たろうさん(asciinet)
	数式環境の処理に関する多様なアイデア、ウィンドウ選択処理に関する
	ユーザインタフェースの繊細な改善案などを頂きました。

Deslarさん(asciinet)
	byte-compile関係のバグ報告などを頂きました。

tadfさん(asciinet)
	Demacsでのプロセス起動時のインタフェースの不具合の報告などを頂き
	ました。

ほんまたけるさん(asciinet)
	パラグラフ境界をLaTeX用に設定しなおす要望などを頂きました。

TUSKさん(asciinet)
	Texinfoドキュメント(初版)を作成して頂きました。

横田和也さん(asciinet)
	dviout起動時の工夫の案、ミニバッファで読み込むもののヒストリを分
	けるアイデアのきっかけをいただき、ヘルプファイルの項目の提供をし
	て頂きました。

kanbai-anさん(asciinet)
	日本語入力モード判定関数のバグを直すパッチなどを頂きました。


yatex
<refer YaTeX>

